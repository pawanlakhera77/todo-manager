{"version":3,"sources":["config/fire.js","components/Login.js","components/ListItems.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Login","props","login","bind","handleChange","signup","state","email","password","e","this","setState","target","name","value","preventDefault","auth","signInWithEmailAndPassword","then","user","console","log","catch","err","createUserWithEmailAndPassword","id","type","placeholder","onChange","onClick","Component","ListItems","listItems","items","map","item","className","key","text","setUpdate","deleteItem","duration","easing","Home","currentItem","handleInput","addItem","signOut","Date","now","newItem","filteredItems","filter","val","logout","onSubmit","App","authListener","onAuthStateChanged","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7c97fba8.chunk.js","sourcesContent":["import firebase from 'firebase'\r\nimport 'firebase/auth'\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyAaCu-KNSyO8gJA8rYTy_UGdnT0BhgqohA\",\r\n    authDomain: \"react-firebase-auth-736b4.firebaseapp.com\",\r\n    databaseURL: \"https://react-firebase-auth-736b4.firebaseio.com\",\r\n    projectId: \"react-firebase-auth-736b4\",\r\n    storageBucket: \"react-firebase-auth-736b4.appspot.com\",\r\n    messagingSenderId: \"526222863010\",\r\n    appId: \"1:526222863010:web:3bf4d786e493f8eafe05fb\"\r\n  };\r\n\r\n  const fire =firebase.initializeApp(firebaseConfig);\r\n\r\n  export default fire;","import React, {Component} from 'react';\r\nimport fire from '../config/fire';\r\n\r\n\r\nclass Login extends Component {\r\n    constructor(props){\r\n       super(props);\r\n       this.login = this.login.bind(this);\r\n       this.handleChange = this.handleChange.bind(this);\r\n       this.signup = this.signup.bind(this)\r\n       this.state = {\r\n           email:\"\",\r\n           password:\"\"\r\n       } \r\n    }\r\n    handleChange(e){\r\n        this.setState({\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n    login(e){\r\n        e.preventDefault();\r\n        fire.auth().signInWithEmailAndPassword(this.state.email,this.state.password).then\r\n            ((user) =>{\r\n                console.log(user)\r\n            }).catch((err)=>{\r\n                console.log(err);\r\n            })\r\n    }\r\n    signup(e){\r\n        e.preventDefault();\r\n        fire.auth().createUserWithEmailAndPassword(this.state.email,this.state.password).then\r\n            ((user) =>{\r\n                console.log(user)\r\n            }).catch((err)=>{\r\n                console.log(err);\r\n            })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id=\"loginTitle\">Login/Signup</div>\r\n                <form>\r\n                    <input \r\n                        type=\"email\"\r\n                        id = \"email\"\r\n                        name = \"email\"\r\n                        placeholder = \"Enter Email Address\"\r\n                        onChange = {this.handleChange}\r\n                        value= {this.state.email}\r\n                        />\r\n                    <input \r\n                        type=\"password\"\r\n                        id = \"password\"\r\n                        name=\"password\"\r\n                        placeholder = \"Enter Password\"\r\n                        onChange = {this.handleChange}\r\n                        value= {this.state.password}\r\n                        />\r\n                    <button onClick={this.login}>Login</button>\r\n                    <button onClick={this.signup}>Signup</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login","import React from 'react'\r\n\r\nimport FlipMove from 'react-flip-move'\r\n\r\nimport './ListItems.css'\r\n\r\nfunction ListItems(props) {\r\n    const items = props.items;\r\n    const listItems = items.map(item =>{\r\n        return <div className=\"list\" key={item.key}>\r\n            <p>\r\n                <input \r\n                    type=\"text\" \r\n                    id={item.key} \r\n                    value={item.text}\r\n                    onChange = {\r\n                        (e) =>{\r\n                            props.setUpdate(e.target.value,item.key)\r\n                        }\r\n                    } />\r\n            <span \r\n                className=\"deleteMe\"\r\n                onClick={\r\n                    () => props.deleteItem(item.key)\r\n                }>\r\n                X\r\n            </span>\r\n            </p>\r\n            \r\n        </div>\r\n    })\r\n    return (\r\n        <div>\r\n            <FlipMove duration={300} easing=\"ease-in-out\">\r\n                {listItems}\r\n            </FlipMove>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItems;","import React, {Component} from 'react';\r\n\r\nimport fire from '../config/fire';\r\n\r\nimport ListItems from './ListItems'\r\n\r\n\r\nclass Home extends Component {\r\n    constructor(props){\r\n       super(props);\r\n       this.state = {\r\n        items : [],\r\n        currentItem : {\r\n            text: \"\",\r\n            key:\"\"\r\n        }\r\n    }\r\n       this.handleInput = this.handleInput.bind(this)\r\n       this.addItem = this.addItem.bind(this)\r\n       this.deleteItem = this.deleteItem.bind(this)\r\n       this.setUpdate = this.setUpdate.bind(this)\r\n    }\r\n    logout() {\r\n        fire.auth().signOut();\r\n    }\r\n    handleInput(e){\r\n        this.setState({\r\n            currentItem:{\r\n                text:e.target.value,\r\n                key:Date.now()\r\n            }\r\n        })\r\n    }\r\n    addItem(e){\r\n        e.preventDefault();\r\n        const newItem = this.state.currentItem;\r\n        if(newItem !== \"\"){\r\n            const items = [...this.state.items,newItem]\r\n            this.setState({\r\n                items:items,\r\n                currentItem : {\r\n                    text: \"\",\r\n                    key:\"\"\r\n                }\r\n            })\r\n        }\r\n    }\r\n    deleteItem (key){\r\n        console.log(key);\r\n        const filteredItems = this.state.items.filter(item =>\r\n            item.key !== key);\r\n        console.log(filteredItems);\r\n        this.setState({\r\n            items:filteredItems\r\n        })\r\n    }\r\n    setUpdate(val,key){\r\n        const items= this.state.items;\r\n        items.map(item => {\r\n            if(item.key === key){\r\n                item.text = val;\r\n            }\r\n        })\r\n        this.setState({\r\n            items:items\r\n        })\r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"Home\">\r\n                <button id=\"logout\" onClick={this.logout}>Logout</button>\r\n                <header>\r\n                <form id=\"todo-form\" onSubmit={this.addItem}>\r\n                    <input \r\n                        type=\"text\"\r\n                        placeholder=\"Enter Text\"\r\n                        value={this.state.currentItem.text}\r\n                        onChange={this.handleInput} />\r\n                    <button \r\n                        type=\"submit\"\r\n                        >Add</button>\r\n                </form>\r\n                </header>\r\n                <ListItems \r\n                    items = {this.state.items} \r\n                    deleteItem={this.deleteItem}\r\n                    setUpdate = {this.setUpdate}/>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home","import React,{Component} from 'react';\nimport './App.css';\n\nimport Login from './components/Login'\nimport Home from './components/Home'\nimport fire from './config/fire';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      user : {}\n    }\n  }\n\n  componentDidMount(){\n    this.authListener();\n  }\n  authListener(){\n    fire.auth().onAuthStateChanged((user) => {\n      if(user) {\n        this.setState({user})\n      }else {\n        this.setState({user:null})\n      }\n    })\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        {this.state.user ? (<Home />): (<Login/>)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}